; Higher-order functions

(define (iterate f x)
  (cons
    x
    (delay 
      (iterate f (f x)))))

(define (range n)
  (take n (iterate inc 0)))

(define (sequence low high stride)
  (if (> low high)
    nil
    (cons
      low
      (delay
        (sequence (+ low stride) high stride)))))


(define (constantly x)
  (λ (. args)
     x))

(define (reverse xs)
  ;^ Not lazy
  (letrec ((aux (λ (l a)
                  (if (empty? l)
                    a
                    (aux    ; tail recursion
                      (rest l)
                      (cons
                        (first l)
                        (delay a)))))))
    (aux xs nil)))

(define (concat xs ys)
  (if (empty? xs)
    ys
    (cons
      (first xs)
      (delay
        (concat (rest xs) ys)))))

(define (map f xs)
  ;^ Maps a function over a list
  (if (empty? xs)
    nil
    (cons
      (f (first xs))
      (delay 
        (map f (rest xs))))))

(define (filter pred xs)
  (if (empty? xs)
    nil
    (let* ((fst (first xs)))
      (if (pred fst)
        (cons fst (delay (filter pred (rest xs))))
        (filter pred (rest xs))))))  ; Needs tail recursion

(define (fold f val xs)
  (if (empty? xs)
    val
    (fold
      f
      (f val (first xs))
      (rest xs))))

(define (reductions f val xs)
  (cons 
    val
    (delay
      (if (not (empty? xs))
        (reductions f (f val (first xs)) (rest xs))))))

(define (take n xs)
  (if (pos? n)
    (cons 
      (first xs)
      (delay 
        (take (dec n) (rest xs))))))

(define (drop n xs)
  (letrec ((step (λ (n xs)
                   (if (if (pos? n) (not (nil? xs)) #f)   ; AND ... Need macros! 
                     (step (dec n) (rest xs))             ; need tail-recursion here too
                     xs))))
    (if (pos? n)
      (step n xs))))

(define (nth xs index)
  (first (drop index xs)))


