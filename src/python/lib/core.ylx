; Core yalix functions

(define (identity x)
  x)

(define (comp f g)
  (λ (x)
    (f (g x))))

(define (memoize f)
  (let* ((already-run? #f)
         (result nil))
    (λ ()
       (if (not already-run?)
         (begin
           (set! result (f))
           (set! already-run? #t)
           result)
         result))))

(define (force delayed-object)
  (delayed-object))

(define (cons a b)
  (tuple a (delay b)))

(define (car xs)
  (if (nil? xs)
    nil
    (get xs 0)))

(define (cdr xs)
  (if (nil? xs)
    nil
    (force (get xs 1))))

(define first car)

(define next cdr)

(define rest cdr)

(define second (comp first next))

(define third (comp second next))

(define empty? nil?)

(define (dec n)
  (- n 1))

(define (inc n)
  (+ n 1))

(define (range n)
  (letrec ((accum (λ (x)
                    (if (< x n)
                      (cons x (accum (inc x)))))))
    (accum 0)))

(define (map f xs)
  (if (empty? xs)
    nil
    (cons
      (f (first xs))
      (map f (rest xs)))))

(define (fold f val xs)
  (if (empty? xs)
    val
    (fold
      f
      (f val (first xs))
      (rest xs))))

(define  (str . xs)
  (fold + "" xs))

(define (factorial x)
  (if (= x 0)
    1
    (* x (factorial (- x 1)))))
