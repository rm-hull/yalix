; Core yalix functions

(define (identity x)
  x)

(define (comp f g)
  (λ (x)
    (f (g x))))

(define (memoize f)
  (let* ((already-run? #f)
         (result nil))
    (λ ()
       (if (not already-run?)
         (begin
           (set! result (f))
           (set! already-run? #t)
           result)
         result))))

(define (force delayed-object)
  (if (atom? delayed-object)
    delayed-object
    (if (pair? delayed-object)
      delayed-object
      (delayed-object))))

(define first car)

(define next (comp force cdr))

(define rest (comp force cdr))

(define second (comp first next))

(define third (comp second next))

(define empty? nil?)

(define (lazy-list xs)
  (if (not (empty? xs))
    (cons
      (first xs)
      (memoize
        (delay
          (lazy-list (rest xs)))))))

(define (list . xs)
    (lazy-list xs))

