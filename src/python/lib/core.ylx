; Core yalix functions

(define (identity x)
  x)

(define (comp f g)
  (λ (x) 
    (f (g x))))

(define empty? nil?)

(define (dec n)
  (- n 1))

(define (inc n)
  (+ n 1))

(define (range n)
  (letrec ((accum (λ (x) 
                (if (< x n)
                  (cons x (accum (inc x)))))))
    (accum 0)))

(define (map f xs)
  ;^ Maps a function over a list
  (if (empty? xs)
    nil
    (cons 
      (f (first xs))
      (map f (rest xs)))))

(define (fold f val xs)
  (if (empty? xs)
    val
    (fold
      f
      (f val (first xs))
      (rest xs))))

(define  (str . xs)
  (fold + "" xs))

(define (factorial n)
   ;^ The factorial of a non-negative integer n, denoted by n!, is
   ;^ the product of all positive integers less than or equal to n.
   (if (= n 0)
    1
    (* n (factorial (- n 1)))))

; This is a comment

(define *print-item-limit* 
  ; cant add doc to primitive int
  55)
